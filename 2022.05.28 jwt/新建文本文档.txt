package com.ykzx.hotel.config;

import com.ykzx.hotel.base.security.AuthenticationEntryPointImpl;
import com.ykzx.hotel.base.security.JwtAccessDeniedHandler;
import com.ykzx.hotel.base.security.JwtAuthenticationTokenFilter;
import com.ykzx.hotel.base.security.JwtUtil;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.SecurityConfigurerAdapter;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.DefaultSecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

/**
 * @Created 祁海明
 */
@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
    /**
     * 认证失败处理类
     */
    private final AuthenticationEntryPointImpl unauthorizedHandler;
    private final JwtAccessDeniedHandler jwtAccessDeniedHandler;
    private final JwtUtil jwtUtil;

    public WebSecurityConfig(AuthenticationEntryPointImpl unauthorizedHandler, JwtAccessDeniedHandler jwtAccessDeniedHandler, JwtUtil jwtUtil) {
        this.unauthorizedHandler = unauthorizedHandler;
        this.jwtAccessDeniedHandler = jwtAccessDeniedHandler;
        this.jwtUtil = jwtUtil;
    }

    @Override
    protected void configure(HttpSecurity httpSecurity) throws Exception{

        httpSecurity
                // CSRF禁用，因为不使用session
                .csrf().disable()
                // 认证失败处理类
                .exceptionHandling()
                .authenticationEntryPoint(unauthorizedHandler)
                .accessDeniedHandler(jwtAccessDeniedHandler)
                // 防止iframe 造成跨域(这一段不写会导致swagger访问不了)
                .and()
                .headers()
                .frameOptions()
                .disable().and()
                // 基于token，所以不需要session
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
                // 过滤请求
                .authorizeRequests()
                // 放行OPTIONS请求
                .antMatchers(HttpMethod.OPTIONS, "/**").permitAll()
                // 允许匿名访问接口
                .antMatchers(EXCLUDE_URL).permitAll()
                // 除上面外的所有请求全部需要鉴权认证
                .anyRequest().authenticated();

        httpSecurity
                .apply(new TokenConfigurer(jwtUtil));
    }

    static class TokenConfigurer extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> {

        private final JwtUtil jwtUtil;

        public TokenConfigurer(JwtUtil jwtUtil){
            this.jwtUtil = jwtUtil;
        }

        @Override
        public void configure(HttpSecurity http) {
            JwtAuthenticationTokenFilter beforeFilter = new JwtAuthenticationTokenFilter(jwtUtil);
            http.addFilterBefore(beforeFilter, UsernamePasswordAuthenticationFilter.class);
        }
    }

    /***
     * 核心过滤器配置方法
     * @param web
     * @throws Exception
     */
    @Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring()
                .antMatchers("/swagger-ui.html","/swagger-resources/**")
                .antMatchers("/api/test","/api/randomImage/**","/api/user/getVerifyCode","/api/user/loginByPwd");
    }


//#####################此处设置是免校验的url
    private static final String[] EXCLUDE_URL = {
            // swagger
            "/doc.html",
            "/swagger-ui.html",
            "/swagger-resources/**",
            "/webjars/**",
            "/*/api-docs","/test/check",
            "/sys/login","/login",
            "/security/getImage","/security/getSmsCode",
            "/sys/**",
            // 错误处理
            "/error/**",
            "/lock/**"
    };
}
####################token的空值是异常处理######################
package com.ykzx.hotel.base.security;

import cn.hutool.extra.spring.SpringUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.annotation.Resource;
import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Objects;

/**
 * Title: token验证的过滤器
 * Description:
 *
 * @author 祁海明
 */
@Slf4j
@Service
public class JwtAuthenticationTokenFilter extends OncePerRequestFilter {

    @Resource
    private final JwtUtil jwtUtil;
    @Resource
    private JwtSecurityProperties jwtSecurityProperties;

    public JwtAuthenticationTokenFilter(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException, IOException {
        try {
            String requestRri = httpServletRequest.getRequestURI();
            //获取request token
            if (Objects.isNull(jwtSecurityProperties)) {
                jwtSecurityProperties =  jwtUtil.jwtSecurityProperties;
                if (Objects.isNull(jwtSecurityProperties)) {
                    jwtSecurityProperties = SpringUtil.getBean("jwtSecurityProperties");
                }
            }
            String token = httpServletRequest.getHeader("token");
	###############此处处理token'的异常问题，一般是login登录页执行登录时会出现无资源的提示######
            if (Objects.nonNull(token)&& !token.equalsIgnoreCase("null") && StringUtils.hasText(token) && jwtUtil.validateToken(token)) {
                Authentication authentication = jwtUtil.getAuthentication(token);
                SecurityContextHolder.getContext().setAuthentication(authentication);
                log.debug("set Authentication to security context for '{}', uri: {}", authentication.getPrincipal().toString(), requestRri);
            } else {
                // TO-DO: token 无效，返回错误页面
                log.error("no token found in Rquest Header, uri: {}", requestRri);
            }
            filterChain.doFilter(httpServletRequest, httpServletResponse);
        } catch (Exception e) {
            // 异常捕获，发送到error controller
            httpServletRequest.setAttribute("filter.error", e);
            //将异常分发到/error/exthrow控制器
            httpServletRequest.getRequestDispatcher("/error/exthrow").forward(httpServletRequest, httpServletResponse);
        }

    }
}

###########################前端加token

/**
 * @description 请求功能类
 *              - 依赖 axios
 * @author  g_eno_phy
 * @version 0.1
 *
 */
import axios from 'axios';
import { CommonsUtil, Constants, LangUtil, ModalUtil } from '@/libs/util';
import router from '@/libs/router';
// 中断
const CancelToken = axios.CancelToken;

window.$axiosRequestList  = []; // 普通请求
window.$axiosDownloadList = []; // 下载请求

/* 默认请求超时为 120 秒 */
axios.defaults.timeout = 120000;

/* url前缀 https://www.example.com:8080/<%=VUE_APP_URL_PREFIX%>/xxx */
axios.defaults.baseURL = process.env.VUE_APP_URL_PREFIX || '/hotel';

// axios.defaults.transformRequest = [function (data) {
//   return qs.stringify(data);
// }];
// 不需要加载页面进度的url列表
const silenceUrlList = ['/security/generator-QRCode', '/login'];

/* 请求拦截器，设置跨域，一般不需要主动设置，应全有服务端设置 */
axios.interceptors.request.use(config => {
  if (!~silenceUrlList.indexOf(config.url)) ModalUtil.showPageLoader(); // 显示页面进度条
  config.headers['Access-Control-Allow-Origin']      = '*'; // cookie模式下不能设置为*，应设置具体域名，如http://www.example.com
  config.headers['Access-Control-Allow-Methods']     = 'POST,GET,OPTIONS,DELETE,HEAD,PUT,PATCH';
  config.headers['Access-Control-Allow-Headers']     = 'Authorization, Origin, X-Requested-With, Content-Type, Accept, token';
  config.headers['Access-Control-Allow-Credentials'] = 'true';  // 保持前端跨域时携带的cookie
  config.headers.token                               = localStorage.getItem(Constants.LOCAL_STORAGE.TOKEN);//token赋值处理
  config.headers.timestamp                           = Date.now();
  return config;
});

/* 响应拦截器，对接口返回errorCode进行判断跳转 */
axios.interceptors.response.use(response => {
  ModalUtil.hidePageLoader(); // 隐藏页面进度条
  const responseData = response.data;
  if (responseData.code === 1) { // 处理错误码，若返回成功则进入resolve
    return Promise.resolve(responseData);
  } else if (response.config.responseType === 'blob') { // 取请求头用
    return Promise.resolve(responseData);
  } else if (responseData.code === 102) { // 用户会话过期
    // 关闭所有对话框实例
    ModalUtil.closeAllModal();
    ModalUtil.closeAllMessage();
    // 清空所有存储
    CommonsUtil.clearAllStorage();
    // 跳转到登录页
    router.replace('/login').then(() => {
      ModalUtil.openMsgWarning('未登录请重新登录');
    });
    return response;
  } else {
    // 是接口返回参数的错误
    return Promise.reject(responseData);
  }
}, error => {
  ModalUtil.hidePageLoader(); // 隐藏页面进度条
  // 处理状态码
  if (error && error.message === 'interrupt') {
    console.log('已中断请求');
  } else if (error && error.response) {
    const statusCode = error.response.status;
    switch (statusCode) {
      case 401:   // 若用户session为空
      case 502:   // 无法连接服务器
      case 503:   // 服务器重启
        ModalUtil.openMsgWarning(Constants.CODE.RESPONSE_STATUS[`${statusCode}`] || '');
        // 关闭所有对话框实例
        ModalUtil.closeAllModal();
        ModalUtil.closeAllMessage();
        // 清空所有存储
        CommonsUtil.clearAllStorage();
        break;
      case 404: // 接口未找到
        ModalUtil.openMsgWarning(Constants.CODE.RESPONSE_STATUS[`${statusCode}`] || '');
        break;
      default: // 其他错误
        break;
    }
  } else {
    // 其他错误
    ModalUtil.openMsgWarning('系统异常');
  }
  // 是接口返回参数的错误
  return Promise.reject(error);
});

export default class HttpClientUtil {
  /**
   * 封装get方法
   * @param url
   * @param params
   * @returns {Promise}
   */

  static get = (url, params = {}) => {
    return axios.get(url, {params: params});
  };

  /**
   * 下载
   * @param url
   * @param method  GET | POST
   * @param queryParams
   * @param fnProgress  function 进度，返回 0-100 数字
   */
  static download = (url, method = 'GET', queryParams = {}, fnProgress) => {
    // 发送请求
    return axios({
      url               : this.rebuildQueryParams(url, queryParams),
      baseURL           : '',
      method            : method, // GET POST
      responseType      : 'blob', // important blob stream
      timeout           : 0,
      cancelToken       : new CancelToken(c => {  // 强行中断请求要用到的
        window.$axiosDownloadList.push(c);
      }),
      onDownloadProgress: (e) => {
        if (e.total) {
          if (typeof fnProgress === 'function') {
            fnProgress(e);
          }
        }
      }
    });
  };

  /**
   * 封装post - query请求
   * @param url
   * @param data
   */
  static postQuery = (url, data = {}) => {
    const sendData = LangUtil.objFilterNil(data, '');
    return axios.post(this.rebuildQueryParams(url, sendData), {}, {
      cancelToken: new CancelToken(c => {  // 强行中断请求要用到的
        window.$axiosRequestList.push(c);
      })
    });
  };

  /**
   * 封装post - jsonData请求
   * @param url
   * @param data
   */
  static postJsonData = (url, data = {}) => {
    const sendData = LangUtil.objFilterNil(data, '');
    return axios.post(url, sendData, {
      cancelToken: new CancelToken(c => {  // 强行中断请求要用到的
        window.$axiosRequestList.push(c);
      })
    });
  };
  /**
   * 封装post - formData请求
   * @param url
   * @param data
   * @returns {Promise}
   */

  static postFormData = (url, data = {}) => {
    const formData = new FormData();
    for (const item in data) {
      if (item) {
        // 对数组，进行额外追加
        if (data[item] && Array.isArray(data[item])) {
          data[item].forEach(val => {
            formData.append(item, val);
          });
        } else {
          // 若值是null 或undefined
          if (LangUtil.isNil(data[item])) {
            formData.append(item, '');
          } else {
            formData.append(item, data[item]);
          }
        }
      }
    }

    return axios.post(url, formData, {
      cancelToken: new CancelToken(c => {  // 强行中断请求要用到的
        window.$axiosRequestList.push(c);
      })
    });
  };

  /**
   * 中断请求
   */
  static interruptRequest() {
    if (window.$axiosRequestList && window.$axiosRequestList.length > 0) {        // 强行中断时才向下执行
      window.$axiosRequestList.forEach(item => {
        item('interrupt');// 给个标志，中断请求
      });
    }
    window.$axiosRequestList = [];
  }

  /**
   * 中断下载
   */
  static interruptDownload() {
    if (window.$axiosDownloadList && window.$axiosDownloadList.length > 0) {        // 强行中断时才向下执行
      window.$axiosDownloadList.forEach(item => {
        item('interrupt');// 给个标志，中断请求
      });
    }
    window.$axiosDownloadList = [];
  }

  /**
   * 重建query - params
   * @private
   * @param url
   * @param queryParams
   * @return {string | any}  '?key1=value1&key2=value2' or ''
   */
  static rebuildQueryParams(url, queryParams) {
    if (!queryParams || Object.keys(queryParams).length === 0) {
      return url;
    }
    queryParams          = queryParams || {};
    const queryParamsArr = [];
    for (const key in queryParams) {
      if (Object.prototype.hasOwnProperty.call(queryParams, key) && queryParams[key] !== undefined) {
        queryParamsArr.push(`${key}=${encodeURIComponent(queryParams[key])}`);
      }
    }
    // 查询参数字符串
    const queryParamsStr = queryParamsArr[0] ? `?${queryParamsArr.join('&')}` : '';
    return `${url}${queryParamsStr}`;
  }
}


